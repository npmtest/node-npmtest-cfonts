{"/home/travis/build/npmtest/node-npmtest-cfonts/test.js":"/* istanbul instrument in package npmtest_cfonts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cfonts/lib.npmtest_cfonts.js":"/* istanbul instrument in package npmtest_cfonts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cfonts = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cfonts = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cfonts/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cfonts && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cfonts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cfonts\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cfonts.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cfonts.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cfonts.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cfonts.__dirname + '/lib.npmtest_cfonts.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cfonts/node_modules/cfonts/index.js":"/***************************************************************************************************************************************************************\n *\n * cfonts\n *\n * Sexy fonts for the console. (CLI output)\n *\n * @license     https://github.com/dominikwilkowski/cfonts/blob/master/LICENSE  GNU GPLv2\n * @author      Dominik Wilkowski  hi@dominik-wilkowski.com\n * @repository  https://github.com/dominikwilkowski/cfonts\n *\n **************************************************************************************************************************************************************/\n\n'use strict';\n\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Dependencies\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nvar _repeat = require('babel-runtime/core-js/string/repeat');\n\nvar _repeat2 = _interopRequireDefault(_repeat);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ChangeCase = require('change-case');\nvar WinSize = require('window-size');\nvar Chalk = require('chalk');\nvar Fs = require('fs');\n\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Constructor\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\nvar CFonts = function () {\n\t//constructor factory\n\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t// Private function\n\t// GetFont, Get and set a selected JSON font-file object into global namespace\n\t//\n\t// @param  font  {string}  The name of the font to be returned\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\tvar GetFont = function GetFont(font) {\n\t\tCFonts.debugging.report('Running GetFont', 1);\n\n\t\t//try loading the font file\n\t\ttry {\n\t\t\tvar fontFile = __dirname + '/fonts/' + font + '.json'; //build font path\n\t\t\tvar FONTFACE = JSON.parse(Fs.readFileSync(fontFile, 'utf8')); //read font file\n\n\t\t\tCFonts.debugging.report('GetFont: Fontface path selected: \"' + fontFile + '\"', 2);\n\n\t\t\tCFonts.FONTFACE = FONTFACE;\n\t\t} catch (error) {\n\t\t\tCFonts.debugging.error('Font file for \"' + font + '\" errored out: ' + error, 2);\n\n\t\t\tCFonts.log.error('Font file for \"' + font + '\" failed to connect to us.\\nTry reinstalling this package.');\n\n\t\t\tprocess.exit(1); //exit program with failure code\n\t\t}\n\t};\n\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t// Private function\n\t// CharLength, return the max width of a character by looking at its longest line\n\t//\n\t// @param  character  {array}    The character array from the font face object\n\t//\n\t// @return            {integer}  The length of a longest line in a charater\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\tvar CharLength = function CharLength(character) {\n\t\tCFonts.debugging.report('Running CharLength', 1);\n\n\t\tvar charWidth = 0;\n\n\t\tfor (var i = 0; i < CFonts.FONTFACE.lines; i++) {\n\t\t\tvar char = character[i].replace(/(<([^>]+)>)/ig, ''); //get character and strip color infos\n\n\t\t\tif (char.length > charWidth) {\n\t\t\t\tcharWidth = char.length; //assign only largest\n\t\t\t}\n\t\t};\n\n\t\tif (charWidth === 0 && CFonts.OPTIONS.letterSpacing > 0) {\n\t\t\tCFonts.debugging.report('CharLength: Adding space to letter spacing', 1);\n\n\t\t\tcharWidth = 1;\n\t\t}\n\n\t\treturn charWidth;\n\t};\n\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t// Private function\n\t// AddLine, Add a new line to the output array\n\t//\n\t// @param  output    {array}   The output array the line shall be appended to\n\t//\n\t// @return           {array}   The output array with new line\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\tvar AddLine = function AddLine(output) {\n\t\tCFonts.debugging.report('Running AddLine', 1);\n\n\t\tvar lineHeight = CFonts.OPTIONS.lineHeight;\n\t\tif (output.length === 0) {\n\t\t\tlineHeight = 0;\n\t\t}\n\n\t\tvar lines = CFonts.FONTFACE.lines + output.length + lineHeight;\n\t\tvar length = output.length;\n\n\t\tfor (var i = length; i < lines; i++) {\n\t\t\tvar index = i - length;\n\n\t\t\tif (index > lineHeight) {\n\t\t\t\toutput[i] = CFonts.FONTFACE.buffer[index - lineHeight];\n\t\t\t} else {\n\t\t\t\toutput[i] = '';\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t};\n\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t// Private function\n\t// AddChar, Add a new character to the output array\n\t//\n\t// @param  CHAR      {string}  The character to be added\n\t// @param  output    {array}   The output array the line shall be appended to\n\t//\n\t// @return           {array}   The output array with new line\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\tvar AddChar = function AddChar(CHAR, output) {\n\t\tCFonts.debugging.report('Running AddChar with \"' + CHAR + '\"', 1);\n\n\t\tvar lines = output.length - CFonts.FONTFACE.lines; //last line is CFonts.FONTFACE.lines tall and is located at the bottom of the output array\n\n\t\tfor (var i = lines; i < output.length; i++) {\n\t\t\t//iterate over last line\n\t\t\tvar index = i - lines;\n\n\t\t\toutput[i] += Colorize(CFonts.FONTFACE.chars[CHAR][index]);\n\t\t}\n\n\t\treturn output;\n\t};\n\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t// Private function\n\t// AddLetterSpacing, Add letter spacing for the next character\n\t//\n\t// @param  output    {array}   The output array the line shall be appended to\n\t//\n\t// @return           {array}   The output array with space\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\tvar AddLetterSpacing = function AddLetterSpacing(output) {\n\t\tCFonts.debugging.report('Running AddLetterSpacing', 1);\n\n\t\tvar lines = output.length - CFonts.FONTFACE.lines; //last line is CFonts.FONTFACE.lines tall and is located at the bottom of the output array\n\n\t\tfor (var i = lines; i < output.length; i++) {\n\t\t\t//iterate over last line\n\t\t\tvar index = i - lines;\n\t\t\tvar space = Colorize(CFonts.FONTFACE.letterspace[index]);\n\n\t\t\tif (space.length === 0 && CFonts.OPTIONS.letterSpacing > 0) {\n\t\t\t\tCFonts.debugging.report('AddLetterSpacing: Adding space to letter spacing', 1);\n\n\t\t\t\tspace = ' ';\n\t\t\t}\n\n\t\t\toutput[i] += (0, _repeat2.default)(space, CFonts.OPTIONS.letterSpacing);\n\t\t}\n\n\t\treturn output;\n\t};\n\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t// Private function\n\t// Colorize, replace placeholders with color information\n\t//\n\t// @param  character  {string}  The string to be converted\n\t//\n\t// @return            {string}  The character with color information for CLI\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\tvar Colorize = function Colorize(character) {\n\t\tCFonts.debugging.report('Running Colorize', 1);\n\n\t\tvar candyColors = ['red', 'green', 'yellow', 'magenta', 'cyan']; //allowed candy colors\n\n\t\tif (character !== undefined) {\n\t\t\tif (CFonts.FONTFACE.colors > 1) {\n\t\t\t\tfor (var i = 0; i < CFonts.FONTFACE.colors; i++) {\n\t\t\t\t\t//convert all colors\n\t\t\t\t\tvar open = new RegExp('<c' + (i + 1) + '>', 'g');\n\t\t\t\t\tvar close = new RegExp('</c' + (i + 1) + '>', 'g');\n\n\t\t\t\t\tvar color = CFonts.OPTIONS.colors[i] || 'white';\n\n\t\t\t\t\tif (color === 'candy') {\n\t\t\t\t\t\tcolor = candyColors[Math.floor(Math.random() * candyColors.length)];\n\t\t\t\t\t}\n\n\t\t\t\t\tcharacter = character.replace(open, Chalk.styles[color.toLowerCase()].open);\n\t\t\t\t\tcharacter = character.replace(close, Chalk.styles[color.toLowerCase()].close);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (CFonts.FONTFACE.colors === 1) {\n\t\t\t\tvar _color = CFonts.OPTIONS.colors[0] || 'white';\n\n\t\t\t\tif (_color === 'candy') {\n\t\t\t\t\t_color = candyColors[Math.floor(Math.random() * candyColors.length)];\n\t\t\t\t}\n\n\t\t\t\tcharacter = Chalk.styles[_color.toLowerCase()].open + character + Chalk.styles[_color.toLowerCase()].close;\n\t\t\t}\n\t\t}\n\n\t\treturn character;\n\t};\n\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t// Private function\n\t// AlignText, calculate the spaces to be added to the left of each line to align them either center or right\n\t//\n\t// @param  output      {array}    The output array the line shall be appended to\n\t// @param  lineLength  {integer}  the current line length\n\t//\n\t// @return             {array}    The output array with space added on the left for alignment\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\tvar AlignText = function AlignText(output, lineLength) {\n\t\tCFonts.debugging.report('Running AlignText', 1);\n\n\t\tvar space = 0;\n\n\t\tif (CFonts.OPTIONS.align === 'center') {\n\t\t\t//calculate the size for center alignment\n\t\t\tspace = Math.floor((WinSize.width - lineLength) / 2);\n\n\t\t\tCFonts.debugging.report('AlignText: Center lineLength: ' + lineLength + ', WinSize.width: ' + WinSize.width + ', space: ' + space, 2);\n\t\t}\n\n\t\tif (CFonts.OPTIONS.align === 'right') {\n\t\t\t//calculate the size for right alignment\n\t\t\tspace = WinSize.width - lineLength;\n\n\t\t\tCFonts.debugging.report('AlignText: Right lineLength: ' + lineLength + ', WinSize.width: ' + WinSize.width + ', space: ' + space, 2);\n\t\t}\n\n\t\tif (space > 0) {\n\t\t\t//only add if there is something to add\n\t\t\tvar lines = output.length - CFonts.FONTFACE.lines; //last line is CFonts.FONTFACE.lines tall and is located at the bottom of the output array\n\t\t\tspace = (0, _repeat2.default)(' ', space);\n\n\t\t\tfor (var i = lines; i < output.length; i++) {\n\t\t\t\t//iterate over last line\n\t\t\t\toutput[i] = space + output[i];\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t};\n\n\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\treturn {\n\t\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t\t// settings\n\t\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t\tDEBUG: false, //Debug setting\n\t\tDEBUGLEVEL: 2, //Debug level setting\n\t\tCOLORS: [//All allowed font colors\n\t\t'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'gray'],\n\t\tBGCOLORS: [//All allowed background colors\n\t\t'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'],\n\t\tALIGNMENT: [//All allowed alignment options\n\t\t'left', 'center', 'right'],\n\t\tFONTFACES: [//All allowed fonts\n\t\t'console', 'block', 'simpleBlock', 'simple', '3d', 'simple3d', 'chrome', 'huge'],\n\t\tFONTFACE: {}, //Font face object to be filled with selected fontface\n\t\tOPTIONS: {}, //User options\n\n\n\t\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t\t// Public function\n\t\t// render, main method to get the ANSI output for a string\n\t\t//\n\t\t// @param  INPUT     {string}   The string you want to write out\n\t\t// @param  SETTINGS  {object}   (optional) Settings object\n\t\t//                              font           {string}   Font face, Default 'block'\n\t\t//                              align          {string}   Text alignment, Default: 'left'\n\t\t//                              colors         {array}    Colors for font, Default: []\n\t\t//                              background     {string}   Chalk color string for background, Default 'Black'\n\t\t//                              letterSpacing  {integer}  Space between letters, Default: set by selected font face\n\t\t//                              lineHeight     {integer}  Space between lines, Default: 1\n\t\t//                              space          {boolean}  Output space before and after output, Default: true\n\t\t//                              maxLength      {integer}  Maximum amount of characters per line, Default width of console window\n\t\t//\n\t\t// @return           {string}   CLI output of INPUT to be consoled out\n\t\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t\trender: function render() {\n\t\t\tvar INPUT = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\t\t\tvar SETTINGS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\t\tCFonts.debugging.report('Running render', 1);\n\n\t\t\tvar write = ''; //output in a string\n\t\t\tvar output = []; //output in an array\n\t\t\tvar lines = 0; //count each line\n\n\t\t\t//SETTINGS\n\t\t\tCFonts.OPTIONS = { //SETTINGS and defaults\n\t\t\t\tfont: SETTINGS.font || 'block',\n\t\t\t\talign: SETTINGS.align || 'left',\n\t\t\t\tcolors: SETTINGS.colors || [],\n\t\t\t\tbackground: ChangeCase.upperCaseFirst(SETTINGS.background) || 'Black',\n\t\t\t\tletterSpacing: SETTINGS.letterSpacing === undefined ? 1 : SETTINGS.letterSpacing,\n\t\t\t\tlineHeight: SETTINGS.lineHeight === undefined ? 1 : parseInt(SETTINGS.lineHeight),\n\t\t\t\tspace: SETTINGS.space === undefined ? true : SETTINGS.space,\n\t\t\t\tmaxLength: SETTINGS.maxLength || 0\n\t\t\t};\n\n\t\t\t//CHECKING INPUT\n\t\t\tif (INPUT === undefined || INPUT === '') {\n\t\t\t\tCFonts.log.error('Please provide text to convert');\n\n\t\t\t\tprocess.exit(1); //exit program with failure code\n\t\t\t}\n\n\t\t\t//CHECKING FONT\n\t\t\tif (CFonts.FONTFACES.indexOf(CFonts.OPTIONS.font) === -1) {\n\t\t\t\tCFonts.log.error('\"' + Chalk.red(SETTINGS.font) + '\" is not a valid font option.\\n' + ('Please use a font from the supported stack:\\n' + Chalk.green('[ ' + CFonts.FONTFACES.join(' | ') + ' ]')));\n\n\t\t\t\tprocess.exit(1); //exit program with failure code\n\t\t\t}\n\n\t\t\t//CHECKING COLORS\n\t\t\tfor (var color in CFonts.OPTIONS.colors) {\n\t\t\t\t//check color usage\n\t\t\t\tif (CFonts.COLORS.indexOf(CFonts.OPTIONS.colors[color]) === -1 && CFonts.OPTIONS.colors[color] !== 'candy') {\n\t\t\t\t\tCFonts.log.error('\"' + Chalk.red(CFonts.OPTIONS.colors[color]) + '\" is not a valid font color option.\\n' + ('Please use a color from the supported stack:\\n' + Chalk.green('[ ' + CFonts.COLORS.join(' | ') + ' | candy ]')));\n\n\t\t\t\t\tprocess.exit(1); //exit program with failure code\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//CHECKING BACKGROUND COLORS\n\t\t\tif (CFonts.BGCOLORS.indexOf(CFonts.OPTIONS.background.toLowerCase()) === -1) {\n\t\t\t\tCFonts.log.error('\"' + Chalk.red(CFonts.OPTIONS.background) + '\" is not a valid background option.\\n' + ('Please use a color from the supported stack:\\n' + Chalk.green('[ ' + CFonts.BGCOLORS.join(' | ') + ' ]')));\n\n\t\t\t\tprocess.exit(1); //exit program with failure code\n\t\t\t}\n\n\t\t\t//CHECKING ALIGNMENT\n\t\t\tif (CFonts.ALIGNMENT.indexOf(CFonts.OPTIONS.align) === -1) {\n\t\t\t\tCFonts.log.error('\"' + Chalk.red(CFonts.OPTIONS.align) + '\" is not a valid alignment option.\\n' + ('Please use an alignment option from the supported stack:\\n' + Chalk.green('[ ' + CFonts.ALIGNMENT.join(' | ') + ' ]')));\n\n\t\t\t\tprocess.exit(1); //exit program with failure code\n\t\t\t}\n\n\t\t\t//DEBUG\n\t\t\tif (CFonts.DEBUG) {\n\t\t\t\t//log options\n\t\t\t\tvar outOption = 'OPTIONS:\\n  Text: ' + INPUT;\n\n\t\t\t\tfor (var key in CFonts.OPTIONS) {\n\t\t\t\t\toutOption += '\\n  Options.' + key + ': ' + CFonts.OPTIONS[key];\n\t\t\t\t}\n\n\t\t\t\tCFonts.debugging.report(outOption, 2);\n\t\t\t}\n\n\t\t\tif (CFonts.OPTIONS.font === 'console') {\n\t\t\t\t//console fontface is pretty easy to process\n\t\t\t\tvar outputLines = INPUT.replace('\\\\', '').split('|'); //remove escape characters and split into each line\n\n\t\t\t\tCFonts.FONTFACE.colors = 1; //console defaults\n\t\t\t\tCFonts.FONTFACE.lines = 1;\n\n\t\t\t\tfor (var line in outputLines) {\n\t\t\t\t\t//each line needs to be pushed into the output array\n\t\t\t\t\tlines += Math.ceil(outputLines[line].length / WinSize.width); //count each line even when they overflow\n\n\t\t\t\t\tif (CFonts.OPTIONS.colors[0] === \"candy\") {\n\t\t\t\t\t\t//if the color is candy\n\t\t\t\t\t\tvar character = '';\n\n\t\t\t\t\t\tfor (var i = 0; i < outputLines[line].length; i++) {\n\t\t\t\t\t\t\t//iterate through the message\n\t\t\t\t\t\t\tcharacter += Colorize(outputLines[line][i]); //and colorize each character individually\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutput.push(character); //push each line to the output array\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput.push(Colorize(outputLines[line])); //colorize line\n\t\t\t\t\t}\n\n\t\t\t\t\toutput = AlignText(output, outputLines[line].length); //calculate alignment based on lineLength\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//all other fontfaces need the font-file and some more work\n\t\t\t\tGetFont(CFonts.OPTIONS.font); //get fontface object and make it global\n\n\t\t\t\t//setting the letterspacing preference from font face if there is no user overwrite\n\t\t\t\tif (SETTINGS.letterSpacing === undefined) {\n\t\t\t\t\tCFonts.debugging.report('Looking up letter spacing from font face', 1);\n\n\t\t\t\t\tvar width = 0;\n\n\t\t\t\t\tfor (var _i in CFonts.FONTFACE.letterspace) {\n\t\t\t\t\t\tvar char = CFonts.FONTFACE.letterspace[_i].replace(/(<([^>]+)>)/ig, ''); //get character and strip color infos\n\n\t\t\t\t\t\tif (width < char.length) {\n\t\t\t\t\t\t\twidth = char.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tCFonts.debugging.report('Letter spacing set to font face default: \"' + width + '\"', 2);\n\t\t\t\t\tCFonts.OPTIONS.letterSpacing = width;\n\t\t\t\t}\n\n\t\t\t\tvar lineLength = CharLength(CFonts.FONTFACE.buffer); //count each output character per line and start with the buffer\n\t\t\t\tvar maxChars = 0; //count each character we print for maxLength option\n\n\t\t\t\toutput = AddLine([]); //create first lines with buffer\n\t\t\t\tlines++;\n\n\t\t\t\toutput = AddLetterSpacing(output); //add letter spacing to the beginning\n\t\t\t\tlineLength += CharLength(CFonts.FONTFACE.letterspace) * CFonts.OPTIONS.letterSpacing; //count the space for the letter spacing\n\n\t\t\t\tfor (var _i2 = 0; _i2 < INPUT.length; _i2++) {\n\t\t\t\t\t//iterate through the message\n\n\t\t\t\t\tvar CHAR = INPUT.charAt(_i2).toUpperCase(); //the current character we convert, only upper case is supported at this time\n\n\t\t\t\t\tif (CFonts.FONTFACE.chars[CHAR] === undefined && CHAR !== '|') {\n\t\t\t\t\t\t//make sure this character exists in the font\n\t\t\t\t\t\tCFonts.debugging.error('Character not found in font: \"' + CHAR + '\"', 2); //fail silently\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCFonts.debugging.report('Character found in font: \"' + CHAR + '\"', 2);\n\n\t\t\t\t\t\tvar lastLineLength = lineLength; //we need the lineLength for alignment before we look up if the next char fits\n\n\t\t\t\t\t\tif (CHAR !== '|') {\n\t\t\t\t\t\t\t//what will the line length be if we add the next char?\n\t\t\t\t\t\t\tlineLength += CharLength(CFonts.FONTFACE.chars[CHAR]); //get the length of this character\n\t\t\t\t\t\t\tlineLength += CharLength(CFonts.FONTFACE.letterspace) * CFonts.OPTIONS.letterSpacing; //new line, new line length\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//jump to next line after OPTIONS.maxLength characters or when line break is found or the console windows would has ran out of space\n\t\t\t\t\t\tif (maxChars >= CFonts.OPTIONS.maxLength && CFonts.OPTIONS.maxLength != 0 || CHAR === '|' || lineLength > WinSize.width) {\n\t\t\t\t\t\t\tlines++;\n\n\t\t\t\t\t\t\tCFonts.debugging.report('NEWLINE: maxChars: ' + maxChars + ', ' + ('CFonts.OPTIONS.maxLength: ' + CFonts.OPTIONS.maxLength + ', ') + ('CHAR: ' + CHAR + ', ') + ('lineLength: ' + lineLength + ', ') + ('WinSize.width: ' + WinSize.width + ' '), 2);\n\n\t\t\t\t\t\t\toutput = AlignText(output, lastLineLength); //calculate alignment based on lineLength\n\n\t\t\t\t\t\t\tlineLength = CharLength(CFonts.FONTFACE.buffer); //new line: new line length\n\t\t\t\t\t\t\tlineLength += CharLength(CFonts.FONTFACE.letterspace) * CFonts.OPTIONS.letterSpacing; //each new line starts with letter spacing\n\t\t\t\t\t\t\tif (CHAR !== '|') {\n\t\t\t\t\t\t\t\t//if this is a character\n\t\t\t\t\t\t\t\tlineLength += CharLength(CFonts.FONTFACE.chars[CHAR]); //get the length of this character\n\t\t\t\t\t\t\t\tlineLength += CharLength(CFonts.FONTFACE.letterspace) * CFonts.OPTIONS.letterSpacing; //add letter spacing at the end\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmaxChars = 0; //new line, new maxLength goal\n\n\t\t\t\t\t\t\toutput = AddLine(output); //adding new line\n\t\t\t\t\t\t\toutput = AddLetterSpacing(output); //add letter spacing to the beginning\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tCFonts.debugging.report('lineLength at: \"' + lineLength + '\"', 2);\n\n\t\t\t\t\t\tif (CHAR !== '|') {\n\t\t\t\t\t\t\tmaxChars++; //counting all printed characters\n\t\t\t\t\t\t\toutput = AddChar(CHAR, output); //add new character\n\t\t\t\t\t\t\toutput = AddLetterSpacing(output); //add letter spacing\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toutput = AlignText(output, lineLength); //alignment last line\n\t\t\t}\n\n\t\t\twrite = output.join('\\n'); //convert to a string\n\n\n\t\t\tif (CFonts.FONTFACE.colors <= 1) {\n\t\t\t\t//add text color if only one\n\t\t\t\twrite = Colorize(write);\n\t\t\t}\n\n\t\t\tif (CFonts.OPTIONS.space) {\n\t\t\t\t//add space\n\t\t\t\twrite = '\\n\\n' + write + '\\n\\n';\n\t\t\t} else {\n\t\t\t\twrite = '\\n' + write;\n\t\t\t}\n\n\t\t\twrite = Chalk['bg' + CFonts.OPTIONS.background](write); //result in one string\n\n\n\t\t\treturn {\n\t\t\t\tstring: write,\n\t\t\t\tarray: output,\n\t\t\t\tlines: lines,\n\t\t\t\toptions: CFonts.OPTIONS\n\t\t\t};\n\t\t},\n\n\t\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t\t// Public function\n\t\t// say, print to console\n\t\t//\n\t\t// @param same as render method\n\t\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t\tsay: function say() {\n\t\t\tvar INPUT = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\t\t\tvar SETTINGS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\t\tCFonts.debugging.report('Running say', 1);\n\n\t\t\tvar write = CFonts.render(INPUT, SETTINGS);\n\n\t\t\tconsole.log(write.string); //write out\n\t\t},\n\n\t\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t\t// Debugging prettiness\n\t\t//\n\t\t// debugging, Print debug message that will be logged to console.\n\t\t//\n\t\t// @method  headline                      Return a headline preferably at the beginning of your app\n\t\t//          @param    [text]   {string}   The sting you want to log\n\t\t//          @param    [level]  {integer}  (optional) The debug level. Show equal and greater levels. Default: 99\n\t\t//          @return   [ansi]   {output}\n\t\t//\n\t\t// @method  report                        Return a message to report starting a process\n\t\t//          @param    [text]   {string}   The sting you want to log\n\t\t//          @param    [level]  {integer}  (optional) The debug level. Show equal and greater levels. Default: 99\n\t\t//          @return   [ansi]   {output}\n\t\t//\n\t\t// @method  error                         Return a message to report an error\n\t\t//          @param    [text]   {string}   The sting you want to log\n\t\t//          @param    [level]  {integer}  (optional) The debug level. Show equal and greater levels. Default: 99\n\t\t//          @return   [ansi]   {output}\n\t\t//\n\t\t// @method  interaction                   Return a message to report an interaction\n\t\t//          @param    [text]   {string}   The sting you want to log\n\t\t//          @param    [level]  {integer}  (optional) The debug level. Show equal and greater levels. Default: 99\n\t\t//          @return   [ansi]   {output}\n\t\t//\n\t\t// @method  send                          Return a message to report data has been sent\n\t\t//          @param    [text]   {string}   The sting you want to log\n\t\t//          @param    [level]  {integer}  (optional) The debug level. Show equal and greater levels. Default: 99\n\t\t//          @return   [ansi]   {output}\n\t\t//\n\t\t// @method  received                      Return a message to report data has been received\n\t\t//          @param    [text]   {string}   The sting you want to log\n\t\t//          @param    [level]  {integer}  (optional) The debug level. Show equal and greater levels. Default: 99\n\t\t//          @return   [ansi]   {output}\n\t\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t\tdebugging: {\n\n\t\t\theadline: function headline(text) {\n\t\t\t\tvar level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 99;\n\n\t\t\t\tif (CFonts.DEBUG && level >= CFonts.DEBUGLEVEL) {\n\t\t\t\t\tconsole.log(Chalk.bgWhite('\\n' + Chalk.bold(' \\u2611  ') + ' ' + text));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\treport: function report(text) {\n\t\t\t\tvar level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 99;\n\n\t\t\t\tif (CFonts.DEBUG && level >= CFonts.DEBUGLEVEL) {\n\t\t\t\t\tconsole.log(Chalk.bgWhite('\\n' + Chalk.bold.green(' \\u2611  ') + ' ' + Chalk.black(text + ' ')));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\terror: function error(text) {\n\t\t\t\tvar level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 99;\n\n\t\t\t\tif (CFonts.DEBUG && level >= CFonts.DEBUGLEVEL) {\n\t\t\t\t\tconsole.log(Chalk.bgWhite('\\n' + Chalk.red(' \\u2612  ') + ' ' + Chalk.black(text + ' ')));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tinteraction: function interaction(text) {\n\t\t\t\tvar level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 99;\n\n\t\t\t\tif (CFonts.DEBUG && level >= CFonts.DEBUGLEVEL) {\n\t\t\t\t\tconsole.log(Chalk.bgWhite('\\n' + Chalk.blue(' \\u261C  ') + ' ' + Chalk.black(text + ' ')));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tsend: function send(text) {\n\t\t\t\tvar level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 99;\n\n\t\t\t\tif (CFonts.DEBUG && level >= CFonts.DEBUGLEVEL) {\n\t\t\t\t\tconsole.log(Chalk.bgWhite('\\n' + Chalk.bold.cyan(' \\u219D  ') + ' ' + Chalk.black(text + ' ')));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\treceived: function received(text) {\n\t\t\t\tvar level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 99;\n\n\t\t\t\tif (CFonts.DEBUG && level >= CFonts.DEBUGLEVEL) {\n\t\t\t\t\tconsole.log(Chalk.bgWhite('\\n' + Chalk.bold.cyan(' \\u219C  ') + ' ' + Chalk.black(text + ' ')));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t\t// Logging prettiness\n\t\t//\n\t\t// log, Print error message to console.\n\t\t//\n\t\t// @method  error                       Log an error out to the user\n\t\t//          @param    [text]  {string}  The sting you want to log\n\t\t//          @return   [ansi]  {output}\n\t\t//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\t\tlog: {\n\t\t\terror: function error(text) {\n\t\t\t\ttext = text.replace(/(?:\\r\\n|\\r|\\n)/g, '\\n       '); //indent each line\n\n\t\t\t\tconsole.log('\\n ' + Chalk.bold.red('Ouch:') + ' ' + text + '\\n');\n\t\t\t}\n\t\t}\n\t};\n}();\n\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Module export\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\nmodule.exports = CFonts;\n","/home/travis/build/npmtest/node-npmtest-cfonts/node_modules/cfonts/bin/font.js":"#!/usr/bin/env node\n\n/***************************************************************************************************************************************************************\n *\n * cfonts\n *\n * Sexy fonts for the console. (CLI output)\n *\n * @license     https://github.com/dominikwilkowski/cfonts/blob/master/LICENSE  GNU GPLv2\n * @author      Dominik Wilkowski  hi@dominik-wilkowski.com\n * @repository  https://github.com/dominikwilkowski/cfonts\n *\n **************************************************************************************************************************************************************/\n\n'use strict';\n\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Dependencies\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Fs = require('fs');\nvar Chalk = require('chalk');\nvar Program = require('commander');\nvar CFonts = require('./../index.js');\n\nvar Package = JSON.parse(Fs.readFileSync(__dirname + '/../package.json', 'utf8'));\nvar Version = Package.version;\n\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Setting up command line tool\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\nProgram.description('This is a tool for sexy fonts in the console. Give your cli some love.').version('v' + Version).usage('\"<value>\" [option1] <input1> [option2] <input1>,<input2> [option3]').option('-f, --font            <keyword>', 'define \"font face\"', 'block').option('-a, --align           <keyword>', 'define \"alignment\" for the text', 'left').option('-c, --colors          <keyword>,<keyword>...', 'provide colors for text', 'white').option('-b, --background      <keyword>', 'provide background color', 'Black').option('-l, --letter-spacing  <n>', 'define letter spacing {integer}').option('-z, --line-height     <n>', 'define line height {integer}', 1).option('-s, --spaceless', 'surpress space on top and on the bottom').option('-m, --max-length     <keyword>', 'define how many character can be on one line').action(function (text) {\n\tProgram.text = text; //add flagless option for text\n}).on('--help', function () {\n\t//adding options for each keyword section\n\tconsole.log(Chalk.bold('  Font face options:'));\n\tconsole.log('  [ ' + CFonts.FONTFACES.join(', ') + ' ]\\n');\n\n\tconsole.log(Chalk.bold('  Alignment options:'));\n\tconsole.log('  [ ' + CFonts.ALIGNMENT.join(', ') + ' ]\\n');\n\n\tconsole.log(Chalk.bold('  Color options:'));\n\tconsole.log('  [ ' + CFonts.COLORS.join(', ') + ' ]\\n');\n\n\tconsole.log(Chalk.bold('  background color options:'));\n\tconsole.log('  [ ' + CFonts.BGCOLORS.join(', ') + ' ]\\n');\n}).parse(process.argv);\n\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Execute program\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\nif (Program.text !== undefined) {\n\t//log OPTIONS for debugging\n\tif (CFonts.DEBUG) {\n\t\tCFonts.debugging.report('OPTIONS:\\n' + ('  CFonts.say(\"' + Program.text + '\", {\\n') + ('\\t\\'font\\': \"' + Program.font + '\",\\n') + ('\\t\\'align\\': \"' + Program.align + '\",\\n') + ('\\t\\'colors\\': ' + (Program.colors ? (0, _stringify2.default)(Program.colors.split(',')) : []) + ',\\n') + ('\\t\\'background\\': \"' + Program.background + '\",\\n') + ('\\t\\'letterSpacing\\': ' + Program.letterSpacing + ',\\n') + ('\\t\\'lineHeight\\': ' + Program.lineHeight + ',\\n') + ('\\t\\'space\\': ' + (Program.spaceless ? false : true) + ',\\n') + ('\\t\\'maxLength\\': ' + Program.maxLength + '\\n') + '  });', 3);\n\t}\n\n\t//execute cfonts\n\tCFonts.say(Program.text, {\n\t\t'font': Program.font,\n\t\t'align': Program.align,\n\t\t'colors': Program.colors ? Program.colors.split(',') : [],\n\t\t'background': Program.background,\n\t\t'letterSpacing': Program.letterSpacing,\n\t\t'lineHeight': Program.lineHeight,\n\t\t'space': Program.spaceless ? false : true,\n\t\t'maxLength': Program.maxLength\n\t});\n} else {\n\t//we do need text to convert\n\tCFonts.log.error('Please provide text to convert with ' + Chalk.green('cfonts -t \"Text\"') + '\\n' + ('Run ' + Chalk.green('cfonts --help') + ' for more infos'));\n}\n"}